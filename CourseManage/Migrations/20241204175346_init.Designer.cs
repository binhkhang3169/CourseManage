// <auto-generated />
using System;
using CourseManage.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CourseManage.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241204175346_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CourseManage.Entities.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnswerId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("CourseManage.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("CourseManage.Entities.BlogPost", b =>
                {
                    b.Property<int>("BlogPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogPostId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InstructorId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BlogPostId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("UserId");

                    b.ToTable("BlogPosts");
                });

            modelBuilder.Entity("CourseManage.Entities.Chapter", b =>
                {
                    b.Property<int>("ChapterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChapterId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderChap")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ChapterId");

                    b.HasIndex("CourseId");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("CourseManage.Entities.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DifficultCourse")
                        .HasColumnType("int");

                    b.Property<double?>("Duration")
                        .HasColumnType("float");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<int?>("PathId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.Property<string>("TrailerUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("PathId");

                    b.HasIndex("PlatformId");

                    b.HasIndex("TopicId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("CourseManage.Entities.Discussion", b =>
                {
                    b.Property<int>("DiscussionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscussionId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InstructorId")
                        .HasColumnType("int");

                    b.Property<int?>("LessonId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("DiscussionId");

                    b.HasIndex("CourseId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("LessonId");

                    b.HasIndex("StudentId");

                    b.ToTable("Discussions");
                });

            modelBuilder.Entity("CourseManage.Entities.DiscussionReply", b =>
                {
                    b.Property<int>("DiscussionReplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscussionReplyId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscussionId")
                        .HasColumnType("int");

                    b.Property<int?>("InstructorId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("DiscussionReplyId");

                    b.HasIndex("DiscussionId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("StudentId");

                    b.ToTable("DiscussionReplies");
                });

            modelBuilder.Entity("CourseManage.Entities.FeedBack", b =>
                {
                    b.Property<int>("FeedBackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedBackId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("FeedBackId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("CourseManage.Entities.Instructor", b =>
                {
                    b.Property<int>("InstructorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstructorId"));

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkFacebook")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkTwitter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TopicId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("InstructorId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("TopicId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("CourseManage.Entities.LearningOutcomes", b =>
                {
                    b.Property<int>("LearningOutcomesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LearningOutcomesId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Outcome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LearningOutcomesId");

                    b.HasIndex("CourseId");

                    b.ToTable("LearningOutcomesEnumerable");
                });

            modelBuilder.Entity("CourseManage.Entities.Lesson", b =>
                {
                    b.Property<int>("LessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LessonId"));

                    b.Property<int>("ChapterId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("EstimateTime")
                        .HasColumnType("float");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<int>("OrderLesson")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LessonId");

                    b.HasIndex("ChapterId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("CourseManage.Entities.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Badge")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("DateBegin")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Hide")
                        .HasColumnType("bit");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Meta")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("ParentMenuId")
                        .HasColumnType("int");

                    b.Property<string>("Span")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ParentMenuId");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Badge = "",
                            DateBegin = new DateTime(2024, 12, 5, 0, 53, 41, 900, DateTimeKind.Local).AddTicks(2190),
                            Hide = false,
                            Icon = "home",
                            Link = "",
                            Meta = "home_meta",
                            Name = "Home",
                            Order = 1,
                            ParentMenuId = 1,
                            Span = "Home"
                        },
                        new
                        {
                            Id = 2,
                            Badge = "",
                            DateBegin = new DateTime(2024, 12, 5, 0, 53, 41, 900, DateTimeKind.Local).AddTicks(2197),
                            Hide = false,
                            Icon = "local_library",
                            Link = "courses",
                            Meta = "courses_meta",
                            Name = "Browse Courses",
                            Order = 2,
                            ParentMenuId = 1,
                            Span = "Browse Courses"
                        },
                        new
                        {
                            Id = 3,
                            Badge = "",
                            DateBegin = new DateTime(2024, 12, 5, 0, 53, 41, 900, DateTimeKind.Local).AddTicks(2199),
                            Hide = false,
                            Icon = "style",
                            Link = "paths",
                            Meta = "paths_meta",
                            Name = "Browse Paths",
                            Order = 3,
                            ParentMenuId = 1,
                            Span = "Browse Paths"
                        },
                        new
                        {
                            Id = 4,
                            Badge = "",
                            DateBegin = new DateTime(2024, 12, 5, 0, 53, 41, 900, DateTimeKind.Local).AddTicks(2202),
                            Hide = false,
                            Icon = "account_box",
                            Link = "student/dashboard",
                            Meta = "dashboard_meta",
                            Name = "Student Dashboard",
                            Order = 4,
                            ParentMenuId = 1,
                            Span = "Student Dashboard"
                        },
                        new
                        {
                            Id = 5,
                            Badge = "",
                            DateBegin = new DateTime(2024, 12, 5, 0, 53, 41, 900, DateTimeKind.Local).AddTicks(2203),
                            Hide = false,
                            Icon = "search",
                            Link = "student/mycourse",
                            Meta = "my_courses_meta",
                            Name = "My Courses",
                            Order = 5,
                            ParentMenuId = 1,
                            Span = "My Courses"
                        },
                        new
                        {
                            Id = 6,
                            Badge = "",
                            DateBegin = new DateTime(2024, 12, 5, 0, 53, 41, 900, DateTimeKind.Local).AddTicks(2207),
                            Hide = false,
                            Icon = "timeline",
                            Link = "student/mypath",
                            Meta = "my_paths_meta",
                            Name = "My Paths",
                            Order = 6,
                            ParentMenuId = 1,
                            Span = "My Paths"
                        },
                        new
                        {
                            Id = 7,
                            Badge = "",
                            DateBegin = new DateTime(2024, 12, 5, 0, 53, 41, 900, DateTimeKind.Local).AddTicks(2209),
                            Hide = false,
                            Icon = "change_history",
                            Link = "student/pathdetail",
                            Meta = "path_details_meta",
                            Name = "Path Details",
                            Order = 7,
                            ParentMenuId = 1,
                            Span = "Path Details"
                        },
                        new
                        {
                            Id = 8,
                            Badge = "",
                            DateBegin = new DateTime(2024, 12, 5, 0, 53, 41, 900, DateTimeKind.Local).AddTicks(2211),
                            Hide = false,
                            Icon = "face",
                            Link = "student/courseprview",
                            Meta = "course_preview_meta",
                            Name = "Course Preview",
                            Order = 8,
                            ParentMenuId = 1,
                            Span = "Course Preview"
                        },
                        new
                        {
                            Id = 9,
                            Badge = "",
                            DateBegin = new DateTime(2024, 12, 5, 0, 53, 41, 900, DateTimeKind.Local).AddTicks(2213),
                            Hide = false,
                            Icon = "panorama_fish_eye",
                            Link = "student/lesson",
                            Meta = "lesson_preview_meta",
                            Name = "Lesson Preview",
                            Order = 9,
                            ParentMenuId = 1,
                            Span = "Lesson Preview"
                        },
                        new
                        {
                            Id = 10,
                            Badge = "PRO",
                            DateBegin = new DateTime(2024, 12, 5, 0, 53, 41, 900, DateTimeKind.Local).AddTicks(2215),
                            Hide = false,
                            Icon = "class",
                            Link = "student/takecourse",
                            Meta = "take_course_meta",
                            Name = "Take Course",
                            Order = 10,
                            ParentMenuId = 1,
                            Span = "Take Course"
                        },
                        new
                        {
                            Id = 11,
                            Badge = "",
                            DateBegin = new DateTime(2024, 12, 5, 0, 53, 41, 900, DateTimeKind.Local).AddTicks(2217),
                            Hide = false,
                            Icon = "import_contacts",
                            Link = "student/takelesson",
                            Meta = "take_lesson_meta",
                            Name = "Take Lesson",
                            Order = 11,
                            ParentMenuId = 1,
                            Span = "Take Lesson"
                        },
                        new
                        {
                            Id = 12,
                            Badge = "",
                            DateBegin = new DateTime(2024, 12, 5, 0, 53, 41, 900, DateTimeKind.Local).AddTicks(2219),
                            Hide = false,
                            Icon = "dvr",
                            Link = "student/takequiz",
                            Meta = "take_quiz_meta",
                            Name = "Take Quiz",
                            Order = 12,
                            ParentMenuId = 1,
                            Span = "Take Quiz"
                        },
                        new
                        {
                            Id = 13,
                            Badge = "",
                            DateBegin = new DateTime(2024, 12, 5, 0, 53, 41, 900, DateTimeKind.Local).AddTicks(2221),
                            Hide = false,
                            Icon = "poll",
                            Link = "student/quizresults",
                            Meta = "my_quizzes_meta",
                            Name = "My Quizzes",
                            Order = 13,
                            ParentMenuId = 1,
                            Span = "My Quizzes"
                        },
                        new
                        {
                            Id = 14,
                            Badge = "",
                            DateBegin = new DateTime(2024, 12, 5, 0, 53, 41, 900, DateTimeKind.Local).AddTicks(2222),
                            Hide = false,
                            Icon = "live_help",
                            Link = "student/quizresultdetails",
                            Meta = "quiz_result_meta",
                            Name = "Quiz Result",
                            Order = 14,
                            ParentMenuId = 1,
                            Span = "Quiz Result"
                        },
                        new
                        {
                            Id = 15,
                            Badge = "",
                            DateBegin = new DateTime(2024, 12, 5, 0, 53, 41, 900, DateTimeKind.Local).AddTicks(2224),
                            Hide = false,
                            Icon = "layers",
                            Link = "student/pathassessment",
                            Meta = "skill_assessment_meta",
                            Name = "Skill Assessment",
                            Order = 15,
                            ParentMenuId = 1,
                            Span = "Skill Assessment"
                        },
                        new
                        {
                            Id = 16,
                            Badge = "",
                            DateBegin = new DateTime(2024, 12, 5, 0, 53, 41, 900, DateTimeKind.Local).AddTicks(2226),
                            Hide = false,
                            Icon = "assignment_turned_in",
                            Link = "student/pathassessmentresul",
                            Meta = "skill_result_meta",
                            Name = "Skill Result",
                            Order = 16,
                            ParentMenuId = 1,
                            Span = "Skill Result"
                        },
                        new
                        {
                            Id = 17,
                            Badge = "",
                            DateBegin = new DateTime(2024, 12, 5, 0, 53, 41, 900, DateTimeKind.Local).AddTicks(2228),
                            Hide = false,
                            Icon = "school",
                            Link = "instructor",
                            Meta = "instructor_dashboard_meta",
                            Name = "Instructor Dashboard",
                            Order = 1,
                            ParentMenuId = 2,
                            Span = "Instructor Dashboard"
                        },
                        new
                        {
                            Id = 18,
                            Badge = "",
                            DateBegin = new DateTime(2024, 12, 5, 0, 53, 41, 900, DateTimeKind.Local).AddTicks(2230),
                            Hide = false,
                            Icon = "import_contacts",
                            Link = "instructor/mycourses",
                            Meta = "manage_courses_meta",
                            Name = "Manage Courses",
                            Order = 2,
                            ParentMenuId = 2,
                            Span = "Manage Courses"
                        },
                        new
                        {
                            Id = 19,
                            Badge = "",
                            DateBegin = new DateTime(2024, 12, 5, 0, 53, 41, 900, DateTimeKind.Local).AddTicks(2233),
                            Hide = false,
                            Icon = "help",
                            Link = "instructor/quizz",
                            Meta = "manage_quizzes_meta",
                            Name = "Manage Quizzes",
                            Order = 3,
                            ParentMenuId = 2,
                            Span = "Manage Quizzes"
                        },
                        new
                        {
                            Id = 20,
                            Badge = "",
                            DateBegin = new DateTime(2024, 12, 5, 0, 53, 41, 900, DateTimeKind.Local).AddTicks(2234),
                            Hide = false,
                            Icon = "trending_up",
                            Link = "instructor/earnings",
                            Meta = "earnings_meta",
                            Name = "Earnings",
                            Order = 4,
                            ParentMenuId = 2,
                            Span = "Earnings"
                        },
                        new
                        {
                            Id = 21,
                            Badge = "",
                            DateBegin = new DateTime(2024, 12, 5, 0, 53, 41, 900, DateTimeKind.Local).AddTicks(2236),
                            Hide = false,
                            Icon = "receipt",
                            Link = "instructor/statement",
                            Meta = "statement_meta",
                            Name = "Statement",
                            Order = 5,
                            ParentMenuId = 2,
                            Span = "Statement"
                        },
                        new
                        {
                            Id = 22,
                            Badge = "",
                            DateBegin = new DateTime(2024, 12, 5, 0, 53, 41, 900, DateTimeKind.Local).AddTicks(2238),
                            Hide = false,
                            Icon = "post_add",
                            Link = "instructor/editcourse",
                            Meta = "edit_course_meta",
                            Name = "Edit Course",
                            Order = 6,
                            ParentMenuId = 2,
                            Span = "Edit Course"
                        },
                        new
                        {
                            Id = 23,
                            Badge = "",
                            DateBegin = new DateTime(2024, 12, 5, 0, 53, 41, 900, DateTimeKind.Local).AddTicks(2240),
                            Hide = false,
                            Icon = "format_shapes",
                            Link = "instructor/editquiz",
                            Meta = "edit_quiz_meta",
                            Name = "Edit Quiz",
                            Order = 7,
                            ParentMenuId = 2,
                            Span = "Edit Quiz"
                        },
                        new
                        {
                            Id = 24,
                            Badge = "",
                            DateBegin = new DateTime(2024, 12, 5, 0, 53, 41, 900, DateTimeKind.Local).AddTicks(2242),
                            Hide = false,
                            Icon = "",
                            Link = "pricing.html",
                            Meta = "pricing_meta",
                            Name = "Pricing",
                            Order = 1,
                            ParentMenuId = 5,
                            Span = "Pricing"
                        },
                        new
                        {
                            Id = 25,
                            Badge = "",
                            DateBegin = new DateTime(2024, 12, 5, 0, 53, 41, 900, DateTimeKind.Local).AddTicks(2243),
                            Hide = false,
                            Icon = "",
                            Link = "login.html",
                            Meta = "login_meta",
                            Name = "Login",
                            Order = 2,
                            ParentMenuId = 5,
                            Span = "Login"
                        },
                        new
                        {
                            Id = 26,
                            Badge = "",
                            DateBegin = new DateTime(2024, 12, 5, 0, 53, 41, 900, DateTimeKind.Local).AddTicks(2245),
                            Hide = false,
                            Icon = "",
                            Link = "signup.html",
                            Meta = "signup_meta",
                            Name = "Signup",
                            Order = 3,
                            ParentMenuId = 5,
                            Span = "Signup"
                        },
                        new
                        {
                            Id = 27,
                            Badge = "",
                            DateBegin = new DateTime(2024, 12, 5, 0, 53, 41, 900, DateTimeKind.Local).AddTicks(2247),
                            Hide = false,
                            Icon = "",
                            Link = "signup-payment.html",
                            Meta = "payment_meta",
                            Name = "Payment",
                            Order = 4,
                            ParentMenuId = 5,
                            Span = "Payment"
                        },
                        new
                        {
                            Id = 28,
                            Badge = "",
                            DateBegin = new DateTime(2024, 12, 5, 0, 53, 41, 900, DateTimeKind.Local).AddTicks(2249),
                            Hide = false,
                            Icon = "",
                            Link = "reset-password.html",
                            Meta = "reset_password_meta",
                            Name = "Reset Password",
                            Order = 5,
                            ParentMenuId = 5,
                            Span = "Reset Password"
                        },
                        new
                        {
                            Id = 29,
                            Badge = "",
                            DateBegin = new DateTime(2024, 12, 5, 0, 53, 41, 900, DateTimeKind.Local).AddTicks(2251),
                            Hide = false,
                            Icon = "",
                            Link = "change-password.html",
                            Meta = "change_password_meta",
                            Name = "Change Password",
                            Order = 6,
                            ParentMenuId = 5,
                            Span = "Change Password"
                        },
                        new
                        {
                            Id = 30,
                            Badge = "",
                            DateBegin = new DateTime(2024, 12, 5, 0, 53, 41, 900, DateTimeKind.Local).AddTicks(2261),
                            Hide = false,
                            Icon = "",
                            Link = "edit-account.html",
                            Meta = "edit_account_meta",
                            Name = "Edit Account",
                            Order = 7,
                            ParentMenuId = 5,
                            Span = "Edit Account"
                        },
                        new
                        {
                            Id = 31,
                            Badge = "",
                            DateBegin = new DateTime(2024, 12, 5, 0, 53, 41, 900, DateTimeKind.Local).AddTicks(2263),
                            Hide = false,
                            Icon = "",
                            Link = "edit-account-profile.html",
                            Meta = "profile_privacy_meta",
                            Name = "Profile & Privacy",
                            Order = 8,
                            ParentMenuId = 5,
                            Span = "Profile & Privacy"
                        },
                        new
                        {
                            Id = 32,
                            Badge = "",
                            DateBegin = new DateTime(2024, 12, 5, 0, 53, 41, 900, DateTimeKind.Local).AddTicks(2265),
                            Hide = false,
                            Icon = "",
                            Link = "edit-account-notifications.html",
                            Meta = "email_notifications_meta",
                            Name = "Email Notifications",
                            Order = 9,
                            ParentMenuId = 5,
                            Span = "Email Notifications"
                        },
                        new
                        {
                            Id = 33,
                            Badge = "",
                            DateBegin = new DateTime(2024, 12, 5, 0, 53, 41, 900, DateTimeKind.Local).AddTicks(2267),
                            Hide = false,
                            Icon = "",
                            Link = "edit-account-password.html",
                            Meta = "account_password_meta",
                            Name = "Account Password",
                            Order = 10,
                            ParentMenuId = 5,
                            Span = "Account Password"
                        },
                        new
                        {
                            Id = 34,
                            Badge = "",
                            DateBegin = new DateTime(2024, 12, 5, 0, 53, 41, 900, DateTimeKind.Local).AddTicks(2269),
                            Hide = false,
                            Icon = "",
                            Link = "billing.html",
                            Meta = "subscription_meta",
                            Name = "Subscription",
                            Order = 11,
                            ParentMenuId = 5,
                            Span = "Subscription"
                        },
                        new
                        {
                            Id = 35,
                            Badge = "",
                            DateBegin = new DateTime(2024, 12, 5, 0, 53, 41, 900, DateTimeKind.Local).AddTicks(2271),
                            Hide = false,
                            Icon = "",
                            Link = "billing-upgrade.html",
                            Meta = "upgrade_account_meta",
                            Name = "Upgrade Account",
                            Order = 12,
                            ParentMenuId = 5,
                            Span = "Upgrade Account"
                        },
                        new
                        {
                            Id = 38,
                            Badge = "",
                            DateBegin = new DateTime(2024, 12, 5, 0, 53, 41, 900, DateTimeKind.Local).AddTicks(2273),
                            Hide = false,
                            Icon = "",
                            Link = "billing-invoice.html",
                            Meta = "invoice_meta",
                            Name = "Invoice",
                            Order = 8,
                            ParentMenuId = 5,
                            Span = "Invoice"
                        },
                        new
                        {
                            Id = 39,
                            Badge = "",
                            DateBegin = new DateTime(2024, 12, 5, 0, 53, 41, 900, DateTimeKind.Local).AddTicks(2275),
                            Hide = false,
                            Icon = "",
                            Link = "messages.html",
                            Meta = "messages_meta",
                            Name = "Messages",
                            Order = 1,
                            ParentMenuId = 4,
                            Span = "Messages"
                        },
                        new
                        {
                            Id = 40,
                            Badge = "",
                            DateBegin = new DateTime(2024, 12, 5, 0, 53, 41, 900, DateTimeKind.Local).AddTicks(2277),
                            Hide = false,
                            Icon = "",
                            Link = "email.html",
                            Meta = "email_meta",
                            Name = "Email",
                            Order = 2,
                            ParentMenuId = 4,
                            Span = "Email"
                        });
                });

            modelBuilder.Entity("CourseManage.Entities.ParentMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateBegin")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Hide")
                        .HasColumnType("bit");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Meta")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Span")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("ParentMenus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateBegin = new DateTime(2024, 12, 5, 0, 53, 41, 900, DateTimeKind.Local).AddTicks(2020),
                            Hide = false,
                            Icon = "school",
                            Link = "sm_student",
                            Meta = "student",
                            Name = "Student",
                            Order = 1,
                            Span = "Student"
                        },
                        new
                        {
                            Id = 2,
                            DateBegin = new DateTime(2024, 12, 5, 0, 53, 41, 900, DateTimeKind.Local).AddTicks(2023),
                            Hide = false,
                            Icon = "format_shapes",
                            Link = "sm_instructor",
                            Meta = "instructor",
                            Name = "Instructor",
                            Order = 2,
                            Span = "Instructor"
                        },
                        new
                        {
                            Id = 3,
                            DateBegin = new DateTime(2024, 12, 5, 0, 53, 41, 900, DateTimeKind.Local).AddTicks(2025),
                            Hide = false,
                            Icon = "apps",
                            Link = "sm_apps",
                            Meta = "apps",
                            Name = "Apps",
                            Order = 3,
                            Span = "Apps"
                        },
                        new
                        {
                            Id = 4,
                            DateBegin = new DateTime(2024, 12, 5, 0, 53, 41, 900, DateTimeKind.Local).AddTicks(2028),
                            Hide = false,
                            Icon = "message",
                            Link = "sm_messaging",
                            Meta = "messaging",
                            Name = "Messaging",
                            Order = 4,
                            Span = "Messaging"
                        },
                        new
                        {
                            Id = 5,
                            DateBegin = new DateTime(2024, 12, 5, 0, 53, 41, 900, DateTimeKind.Local).AddTicks(2030),
                            Hide = false,
                            Icon = "account_box",
                            Link = "sm_account",
                            Meta = "account",
                            Name = "Account",
                            Order = 5,
                            Span = "Account"
                        });
                });

            modelBuilder.Entity("CourseManage.Entities.Path", b =>
                {
                    b.Property<int>("PathId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PathId"));

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TypePathId")
                        .HasColumnType("int");

                    b.HasKey("PathId");

                    b.HasIndex("TypePathId");

                    b.ToTable("Paths");
                });

            modelBuilder.Entity("CourseManage.Entities.PaymentInformation", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("AutoRenew")
                        .HasColumnType("bit");

                    b.Property<string>("CreditNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("PaymentInformations");
                });

            modelBuilder.Entity("CourseManage.Entities.Platform", b =>
                {
                    b.Property<int>("PlatformId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlatformId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("PlatformId");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("CourseManage.Entities.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("CorrectAnswerId")
                        .HasColumnType("int");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.HasKey("QuestionId");

                    b.HasIndex("QuizId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("CourseManage.Entities.Quiz", b =>
                {
                    b.Property<int>("QuizId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuizId"));

                    b.Property<int>("CoureId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MaxScore")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("QuizId");

                    b.HasIndex("CoureId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("CourseManage.Entities.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkFacebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkTwitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("School")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StudentId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("CourseManage.Entities.StudentPath", b =>
                {
                    b.Property<int>("StudentPathId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentPathId"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("PathId")
                        .HasColumnType("int");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("StudentPathId");

                    b.HasIndex("CourseId");

                    b.HasIndex("PathId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentPaths");
                });

            modelBuilder.Entity("CourseManage.Entities.StudentQuiz", b =>
                {
                    b.Property<int>("StudentQuizId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentQuizId"));

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("StudentQuizId");

                    b.HasIndex("QuizId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentQuizzes");
                });

            modelBuilder.Entity("CourseManage.Entities.Subscription", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionId"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubscriptionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SubscriptionId");

                    b.HasIndex("SubscriptionTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("CourseManage.Entities.SubscriptionType", b =>
                {
                    b.Property<int>("SubscriptionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionTypeId"));

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("SubscriptionTypeId");

                    b.ToTable("SubscriptionTypes");
                });

            modelBuilder.Entity("CourseManage.Entities.Topic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TopicId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("TopicId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("CourseManage.Entities.TypePath", b =>
                {
                    b.Property<int>("TypePathId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypePathId"));

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypePathId");

                    b.ToTable("TypePaths");
                });

            modelBuilder.Entity("CourseManage.Entities.UserCourse", b =>
                {
                    b.Property<int>("UserCourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserCourseId"));

                    b.Property<int?>("ChapterId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("LessonId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserCourseId");

                    b.HasIndex("ChapterId");

                    b.HasIndex("CourseId");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCourses");
                });

            modelBuilder.Entity("CourseManage.Entities.UserLesson", b =>
                {
                    b.Property<int>("UserLessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserLessonId"));

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserLessonId");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLessons");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("CourseManage.Entities.Answer", b =>
                {
                    b.HasOne("CourseManage.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("CourseManage.Entities.BlogPost", b =>
                {
                    b.HasOne("CourseManage.Entities.Instructor", null)
                        .WithMany("BlogPosts")
                        .HasForeignKey("InstructorId");

                    b.HasOne("CourseManage.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CourseManage.Entities.Chapter", b =>
                {
                    b.HasOne("CourseManage.Entities.Course", "Course")
                        .WithMany("Chapters")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("CourseManage.Entities.Course", b =>
                {
                    b.HasOne("CourseManage.Entities.Instructor", "Instructor")
                        .WithMany("CoursesInstructed")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseManage.Entities.Path", "Path")
                        .WithMany("Courses")
                        .HasForeignKey("PathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseManage.Entities.Platform", "Platform")
                        .WithMany("Courses")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseManage.Entities.Topic", "Topic")
                        .WithMany("Courses")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");

                    b.Navigation("Path");

                    b.Navigation("Platform");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("CourseManage.Entities.Discussion", b =>
                {
                    b.HasOne("CourseManage.Entities.Course", "Course")
                        .WithMany("Discussions")
                        .HasForeignKey("CourseId");

                    b.HasOne("CourseManage.Entities.Instructor", "Instructor")
                        .WithMany("DiscussionsStarted")
                        .HasForeignKey("InstructorId");

                    b.HasOne("CourseManage.Entities.Lesson", "Lesson")
                        .WithMany("Discussions")
                        .HasForeignKey("LessonId");

                    b.HasOne("CourseManage.Entities.Student", "Student")
                        .WithMany("DiscussionsStarted")
                        .HasForeignKey("StudentId");

                    b.Navigation("Course");

                    b.Navigation("Instructor");

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CourseManage.Entities.DiscussionReply", b =>
                {
                    b.HasOne("CourseManage.Entities.Discussion", "Discussion")
                        .WithMany("DiscussionReplies")
                        .HasForeignKey("DiscussionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseManage.Entities.Instructor", "Instructor")
                        .WithMany("DiscussionReplies")
                        .HasForeignKey("InstructorId");

                    b.HasOne("CourseManage.Entities.Student", "Student")
                        .WithMany("DiscussionReplies")
                        .HasForeignKey("StudentId");

                    b.Navigation("Discussion");

                    b.Navigation("Instructor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CourseManage.Entities.FeedBack", b =>
                {
                    b.HasOne("CourseManage.Entities.Course", "Course")
                        .WithMany("FeedBacks")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseManage.Entities.Student", "Student")
                        .WithMany("FeedBacks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CourseManage.Entities.Instructor", b =>
                {
                    b.HasOne("CourseManage.Entities.AppUser", null)
                        .WithMany("Instructors")
                        .HasForeignKey("AppUserId");

                    b.HasOne("CourseManage.Entities.Topic", "PrimaryTopic")
                        .WithMany("Instructors")
                        .HasForeignKey("TopicId");

                    b.HasOne("CourseManage.Entities.AppUser", "AppUser")
                        .WithOne()
                        .HasForeignKey("CourseManage.Entities.Instructor", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("PrimaryTopic");
                });

            modelBuilder.Entity("CourseManage.Entities.LearningOutcomes", b =>
                {
                    b.HasOne("CourseManage.Entities.Course", "Course")
                        .WithMany("LearningOutcomes")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("CourseManage.Entities.Lesson", b =>
                {
                    b.HasOne("CourseManage.Entities.Chapter", "Chapter")
                        .WithMany("Lessons")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("CourseManage.Entities.Menu", b =>
                {
                    b.HasOne("CourseManage.Entities.ParentMenu", "ParentMenu")
                        .WithMany("Menus")
                        .HasForeignKey("ParentMenuId");

                    b.Navigation("ParentMenu");
                });

            modelBuilder.Entity("CourseManage.Entities.Path", b =>
                {
                    b.HasOne("CourseManage.Entities.TypePath", "TypePath")
                        .WithMany()
                        .HasForeignKey("TypePathId");

                    b.Navigation("TypePath");
                });

            modelBuilder.Entity("CourseManage.Entities.PaymentInformation", b =>
                {
                    b.HasOne("CourseManage.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CourseManage.Entities.Question", b =>
                {
                    b.HasOne("CourseManage.Entities.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("CourseManage.Entities.Quiz", b =>
                {
                    b.HasOne("CourseManage.Entities.Course", "Course")
                        .WithMany("Quizzes")
                        .HasForeignKey("CoureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("CourseManage.Entities.Student", b =>
                {
                    b.HasOne("CourseManage.Entities.AppUser", "AppUser")
                        .WithMany("Students")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("CourseManage.Entities.StudentPath", b =>
                {
                    b.HasOne("CourseManage.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("CourseManage.Entities.Path", "Path")
                        .WithMany()
                        .HasForeignKey("PathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseManage.Entities.Student", "Student")
                        .WithMany("StudentPaths")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Path");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CourseManage.Entities.StudentQuiz", b =>
                {
                    b.HasOne("CourseManage.Entities.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseManage.Entities.Student", "Student")
                        .WithMany("StudentQuizzes")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CourseManage.Entities.Subscription", b =>
                {
                    b.HasOne("CourseManage.Entities.SubscriptionType", "SubscriptionType")
                        .WithMany("Subscriptions")
                        .HasForeignKey("SubscriptionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseManage.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("SubscriptionType");
                });

            modelBuilder.Entity("CourseManage.Entities.UserCourse", b =>
                {
                    b.HasOne("CourseManage.Entities.Chapter", "Chapter")
                        .WithMany()
                        .HasForeignKey("ChapterId");

                    b.HasOne("CourseManage.Entities.Course", "Course")
                        .WithMany("UserCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseManage.Entities.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId");

                    b.HasOne("CourseManage.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chapter");

                    b.Navigation("Course");

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CourseManage.Entities.UserLesson", b =>
                {
                    b.HasOne("CourseManage.Entities.Lesson", "Lesson")
                        .WithMany("UserLessons")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseManage.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CourseManage.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CourseManage.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseManage.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CourseManage.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseManage.Entities.AppUser", b =>
                {
                    b.Navigation("Instructors");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("CourseManage.Entities.Chapter", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("CourseManage.Entities.Course", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("Discussions");

                    b.Navigation("FeedBacks");

                    b.Navigation("LearningOutcomes");

                    b.Navigation("Quizzes");

                    b.Navigation("UserCourses");
                });

            modelBuilder.Entity("CourseManage.Entities.Discussion", b =>
                {
                    b.Navigation("DiscussionReplies");
                });

            modelBuilder.Entity("CourseManage.Entities.Instructor", b =>
                {
                    b.Navigation("BlogPosts");

                    b.Navigation("CoursesInstructed");

                    b.Navigation("DiscussionReplies");

                    b.Navigation("DiscussionsStarted");
                });

            modelBuilder.Entity("CourseManage.Entities.Lesson", b =>
                {
                    b.Navigation("Discussions");

                    b.Navigation("UserLessons");
                });

            modelBuilder.Entity("CourseManage.Entities.ParentMenu", b =>
                {
                    b.Navigation("Menus");
                });

            modelBuilder.Entity("CourseManage.Entities.Path", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("CourseManage.Entities.Platform", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("CourseManage.Entities.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("CourseManage.Entities.Quiz", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("CourseManage.Entities.Student", b =>
                {
                    b.Navigation("DiscussionReplies");

                    b.Navigation("DiscussionsStarted");

                    b.Navigation("FeedBacks");

                    b.Navigation("StudentPaths");

                    b.Navigation("StudentQuizzes");
                });

            modelBuilder.Entity("CourseManage.Entities.SubscriptionType", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("CourseManage.Entities.Topic", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Instructors");
                });
#pragma warning restore 612, 618
        }
    }
}
